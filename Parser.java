
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\012\013\000\002\013\003" +
    "\000\002\013\002\000\002\014\003\000\002\014\005\000" +
    "\002\015\004\000\002\004\004\000\002\004\002\000\002" +
    "\005\004\000\002\005\005\000\002\005\006\000\002\005" +
    "\007\000\002\005\007\000\002\005\006\000\002\005\005" +
    "\000\002\005\006\000\002\005\005\000\002\005\005\000" +
    "\002\005\007\000\002\005\011\000\002\005\015\000\002" +
    "\005\014\000\002\005\011\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\004\000\002\006\005\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\005\000\002\006" +
    "\006\000\002\006\004\000\002\006\006\000\002\006\006" +
    "\000\002\010\003\000\002\010\002\000\002\011\003\000" +
    "\002\011\005\000\002\016\005\000\002\016\004\000\002" +
    "\017\006\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\060\002\ufffe\015\ufffe\023\ufffe\037\ufffe\040" +
    "\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe" +
    "\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053\004\054\ufffe\056" +
    "\ufffe\061\ufffe\062\ufffe\065\ufffe\066\ufffe\067\ufffe\001\002" +
    "\000\014\037\023\040\032\041\036\042\013\043\015\001" +
    "\002\000\004\002\204\001\002\000\056\002\ufff6\015\020" +
    "\023\017\037\023\040\032\041\036\042\013\043\015\044" +
    "\025\045\033\046\034\047\012\050\011\051\035\052\022" +
    "\054\026\056\040\061\021\062\024\065\031\066\027\067" +
    "\037\001\002\000\060\002\ufffe\015\ufffe\023\ufffe\037\ufffe" +
    "\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046" +
    "\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053\004\054\ufffe" +
    "\056\ufffe\061\ufffe\062\ufffe\065\ufffe\066\ufffe\067\ufffe\001" +
    "\002\000\056\002\uffff\015\uffff\023\uffff\037\uffff\040\uffff" +
    "\041\uffff\042\uffff\043\uffff\044\uffff\045\uffff\046\uffff\047" +
    "\uffff\050\uffff\051\uffff\052\uffff\054\uffff\056\uffff\061\uffff" +
    "\062\uffff\065\uffff\066\uffff\067\uffff\001\002\000\022\015" +
    "\020\023\017\044\025\045\033\047\012\065\031\066\047" +
    "\067\037\001\002\000\022\015\020\023\017\044\025\045" +
    "\033\047\012\065\031\066\047\067\037\001\002\000\006" +
    "\020\uffca\066\uffca\001\002\000\030\004\176\006\054\007" +
    "\051\010\056\011\053\013\052\014\061\016\057\027\055" +
    "\034\175\035\060\001\002\000\004\017\172\001\002\000" +
    "\004\066\162\001\002\000\024\015\020\023\017\024\uffd3" +
    "\044\025\045\033\047\012\065\031\066\047\067\037\001" +
    "\002\000\022\015\020\023\017\044\025\045\033\047\012" +
    "\065\031\066\047\067\037\001\002\000\022\015\020\023" +
    "\017\044\025\045\033\047\012\065\031\066\047\067\037" +
    "\001\002\000\004\023\152\001\002\000\006\020\uffcd\066" +
    "\uffcd\001\002\000\004\025\133\001\002\000\044\004\uffdb" +
    "\006\uffdb\007\uffdb\010\uffdb\011\uffdb\013\uffdb\014\uffdb\016" +
    "\uffdb\024\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\001\002\000\004\025\121\001" +
    "\002\000\034\004\uffde\005\116\006\uffde\007\uffde\010\uffde" +
    "\011\uffde\013\uffde\014\uffde\016\uffde\025\101\027\uffde\034" +
    "\uffde\035\uffde\001\002\000\004\002\001\001\002\000\044" +
    "\004\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\013\uffdd\014" +
    "\uffdd\016\uffdd\024\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\034\uffdd\035\uffdd\036\uffdd\001\002\000\006\020" +
    "\uffcc\066\uffcc\001\002\000\044\004\uffda\006\uffda\007\uffda" +
    "\010\uffda\011\uffda\013\uffda\014\uffda\016\uffda\024\uffda\026" +
    "\uffda\027\uffda\030\uffda\031\uffda\032\uffda\034\uffda\035\uffda" +
    "\036\uffda\001\002\000\022\015\020\023\017\044\025\045" +
    "\033\047\012\065\031\066\047\067\037\001\002\000\054" +
    "\015\020\023\017\037\023\040\032\041\036\042\013\043" +
    "\015\044\025\045\033\046\034\047\012\050\011\051\035" +
    "\052\022\054\026\056\040\061\021\062\024\065\031\066" +
    "\027\067\037\001\002\000\006\020\uffcb\066\uffcb\001\002" +
    "\000\044\004\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\013" +
    "\uffdc\014\uffdc\016\uffdc\024\uffdc\026\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\034\uffdc\035\uffdc\036\uffdc\001\002\000" +
    "\004\025\043\001\002\000\060\002\ufff6\015\020\023\017" +
    "\024\ufff6\037\023\040\032\041\036\042\013\043\015\044" +
    "\025\045\033\046\034\047\012\050\011\051\035\052\022" +
    "\054\026\056\040\061\021\062\024\065\031\066\027\067" +
    "\037\001\002\000\006\002\ufff7\024\ufff7\001\002\000\014" +
    "\037\023\040\032\041\036\042\013\043\015\001\002\000" +
    "\004\066\045\001\002\000\004\032\046\001\002\000\022" +
    "\015\020\023\017\044\025\045\033\047\012\065\031\066" +
    "\047\067\037\001\002\000\046\004\uffde\006\uffde\007\uffde" +
    "\010\uffde\011\uffde\013\uffde\014\uffde\016\uffde\024\uffde\025" +
    "\101\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\034\uffde" +
    "\035\uffde\036\uffde\001\002\000\026\006\054\007\051\010" +
    "\056\011\053\013\052\014\061\016\057\026\062\027\055" +
    "\035\060\001\002\000\022\015\020\023\017\044\025\045" +
    "\033\047\012\065\031\066\047\067\037\001\002\000\022" +
    "\015\020\023\017\044\025\045\033\047\012\065\031\066" +
    "\047\067\037\001\002\000\022\015\020\023\017\044\025" +
    "\045\033\047\012\065\031\066\047\067\037\001\002\000" +
    "\022\015\020\023\017\044\025\045\033\047\012\065\031" +
    "\066\047\067\037\001\002\000\022\015\020\023\017\044" +
    "\025\045\033\047\012\065\031\066\047\067\037\001\002" +
    "\000\022\015\020\023\017\044\025\045\033\047\012\065" +
    "\031\066\047\067\037\001\002\000\022\015\020\023\017" +
    "\044\025\045\033\047\012\065\031\066\047\067\037\001" +
    "\002\000\022\015\020\023\017\044\025\045\033\047\012" +
    "\065\031\066\047\067\037\001\002\000\022\015\020\023" +
    "\017\044\025\045\033\047\012\065\031\066\047\067\037" +
    "\001\002\000\004\023\063\001\002\000\056\015\020\023" +
    "\017\024\ufff6\037\023\040\032\041\036\042\013\043\015" +
    "\044\025\045\033\046\034\047\012\050\011\051\035\052" +
    "\022\054\026\056\040\061\021\062\024\065\031\066\027" +
    "\067\037\001\002\000\004\024\065\001\002\000\064\002" +
    "\uffe8\015\uffe8\023\uffe8\024\uffe8\037\uffe8\040\uffe8\041\uffe8" +
    "\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050" +
    "\uffe8\051\uffe8\052\uffe8\054\uffe8\056\uffe8\061\uffe8\062\uffe8" +
    "\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\001\002\000" +
    "\044\004\uffe1\006\054\007\051\010\056\011\053\013\052" +
    "\014\uffe1\016\057\024\uffe1\026\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\034\uffe1\035\uffe1\036\uffe1\001\002\000\026" +
    "\006\054\007\051\010\056\011\053\013\052\014\061\016" +
    "\057\027\055\035\060\036\070\001\002\000\044\004\uffd5" +
    "\006\uffd5\007\uffd5\010\uffd5\011\uffd5\013\uffd5\014\uffd5\016" +
    "\uffd5\024\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\034\uffd5\035\uffd5\036\uffd5\001\002\000\044\004\uffdf\006" +
    "\054\007\051\010\056\011\053\013\uffdf\014\uffdf\016\uffdf" +
    "\024\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\001\002\000\044\004\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\011\uffe4\013\uffe4\014\uffe4\016\uffe4\024" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\001\002\000\026\006\054\007\051\010" +
    "\056\011\053\013\052\014\061\016\057\027\055\030\074" +
    "\035\060\001\002\000\044\004\uffd6\006\uffd6\007\uffd6\010" +
    "\uffd6\011\uffd6\013\uffd6\014\uffd6\016\uffd6\024\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\034\uffd6\035\uffd6\036" +
    "\uffd6\001\002\000\044\004\uffe6\006\uffe6\007\uffe6\010\056" +
    "\011\053\013\uffe6\014\uffe6\016\uffe6\024\uffe6\026\uffe6\027" +
    "\uffe6\030\uffe6\031\uffe6\032\uffe6\034\uffe6\035\uffe6\036\uffe6" +
    "\001\002\000\044\004\uffe3\006\uffe3\007\uffe3\010\uffe3\011" +
    "\uffe3\013\uffe3\014\uffe3\016\uffe3\024\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\034\uffe3\035\uffe3\036\uffe3\001" +
    "\002\000\044\004\uffe2\006\054\007\051\010\056\011\053" +
    "\013\uffe2\014\uffe2\016\057\024\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\034\uffe2\035\uffe2\036\uffe2\001\002" +
    "\000\044\004\uffe5\006\uffe5\007\uffe5\010\056\011\053\013" +
    "\uffe5\014\uffe5\016\uffe5\024\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\034\uffe5\035\uffe5\036\uffe5\001\002\000" +
    "\024\015\020\023\017\026\uffd3\044\025\045\033\047\012" +
    "\065\031\066\047\067\037\001\002\000\004\026\107\001" +
    "\002\000\006\024\uffd4\026\uffd4\001\002\000\032\006\054" +
    "\007\051\010\056\011\053\013\052\014\061\016\057\024" +
    "\uffd2\026\uffd2\027\055\031\105\035\060\001\002\000\022" +
    "\015\020\023\017\044\025\045\033\047\012\065\031\066" +
    "\047\067\037\001\002\000\006\024\uffd1\026\uffd1\001\002" +
    "\000\044\004\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\013" +
    "\uffd8\014\uffd8\016\uffd8\024\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\034\uffd8\035\uffd8\036\uffd8\001\002\000" +
    "\004\023\111\001\002\000\056\015\020\023\017\024\ufff6" +
    "\037\023\040\032\041\036\042\013\043\015\044\025\045" +
    "\033\046\034\047\012\050\011\051\035\052\022\054\026" +
    "\056\040\061\021\062\024\065\031\066\027\067\037\001" +
    "\002\000\004\024\113\001\002\000\064\002\uffeb\015\uffeb" +
    "\023\uffeb\024\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043" +
    "\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb" +
    "\052\uffeb\054\uffeb\056\uffeb\061\uffeb\062\uffeb\063\uffeb\064" +
    "\uffeb\065\uffeb\066\uffeb\067\uffeb\001\002\000\026\004\115" +
    "\006\054\007\051\010\056\011\053\013\052\014\061\016" +
    "\057\027\055\035\060\001\002\000\064\002\ufff4\015\ufff4" +
    "\023\ufff4\024\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043" +
    "\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4" +
    "\052\ufff4\054\ufff4\056\ufff4\061\ufff4\062\ufff4\063\ufff4\064" +
    "\ufff4\065\ufff4\066\ufff4\067\ufff4\001\002\000\022\015\020" +
    "\023\017\044\025\045\033\047\012\065\031\066\047\067" +
    "\037\001\002\000\026\004\120\006\054\007\051\010\056" +
    "\011\053\013\052\014\061\016\057\027\055\035\060\001" +
    "\002\000\064\002\ufff3\015\ufff3\023\ufff3\024\ufff3\037\ufff3" +
    "\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046" +
    "\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\054\ufff3\056\ufff3" +
    "\061\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067" +
    "\ufff3\001\002\000\022\015\020\023\017\044\025\045\033" +
    "\047\012\065\031\066\047\067\037\001\002\000\026\006" +
    "\054\007\051\010\056\011\053\013\052\014\061\016\057" +
    "\026\123\027\055\035\060\001\002\000\004\023\124\001" +
    "\002\000\056\015\020\023\017\024\ufff6\037\023\040\032" +
    "\041\036\042\013\043\015\044\025\045\033\046\034\047" +
    "\012\050\011\051\035\052\022\054\026\056\040\061\021" +
    "\062\024\065\031\066\027\067\037\001\002\000\004\024" +
    "\126\001\002\000\066\002\uffea\015\uffea\023\uffea\024\uffea" +
    "\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045" +
    "\uffea\046\uffea\047\uffea\050\uffea\051\uffea\052\uffea\054\uffea" +
    "\055\127\056\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065" +
    "\uffea\066\uffea\067\uffea\001\002\000\004\023\130\001\002" +
    "\000\056\015\020\023\017\024\ufff6\037\023\040\032\041" +
    "\036\042\013\043\015\044\025\045\033\046\034\047\012" +
    "\050\011\051\035\052\022\054\026\056\040\061\021\062" +
    "\024\065\031\066\027\067\037\001\002\000\004\024\132" +
    "\001\002\000\064\002\uffe9\015\uffe9\023\uffe9\024\uffe9\037" +
    "\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9" +
    "\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\054\uffe9\056" +
    "\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9" +
    "\067\uffe9\001\002\000\022\015\020\023\017\044\025\045" +
    "\033\047\012\065\031\066\047\067\037\001\002\000\026" +
    "\006\054\007\051\010\056\011\053\013\052\014\061\016" +
    "\057\026\135\027\055\035\060\001\002\000\004\023\136" +
    "\001\002\000\006\063\142\064\137\001\002\000\004\032" +
    "\150\001\002\000\006\063\142\064\137\001\002\000\004" +
    "\024\146\001\002\000\022\015\020\023\017\044\025\045" +
    "\033\047\012\065\031\066\047\067\037\001\002\000\026" +
    "\006\054\007\051\010\056\011\053\013\052\014\061\016" +
    "\057\027\055\032\144\035\060\001\002\000\054\015\020" +
    "\023\017\037\023\040\032\041\036\042\013\043\015\044" +
    "\025\045\033\046\034\047\012\050\011\051\035\052\022" +
    "\054\026\056\040\061\021\062\024\065\031\066\027\067" +
    "\037\001\002\000\006\063\uffce\064\uffce\001\002\000\064" +
    "\002\uffe7\015\uffe7\023\uffe7\024\uffe7\037\uffe7\040\uffe7\041" +
    "\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7" +
    "\050\uffe7\051\uffe7\052\uffe7\054\uffe7\056\uffe7\061\uffe7\062" +
    "\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\001\002" +
    "\000\004\024\uffcf\001\002\000\054\015\020\023\017\037" +
    "\023\040\032\041\036\042\013\043\015\044\025\045\033" +
    "\046\034\047\012\050\011\051\035\052\022\054\026\056" +
    "\040\061\021\062\024\065\031\066\027\067\037\001\002" +
    "\000\004\024\uffd0\001\002\000\056\015\020\023\017\024" +
    "\ufff6\037\023\040\032\041\036\042\013\043\015\044\025" +
    "\045\033\046\034\047\012\050\011\051\035\052\022\054" +
    "\026\056\040\061\021\062\024\065\031\066\027\067\037" +
    "\001\002\000\004\024\154\001\002\000\064\002\uffee\015" +
    "\uffee\023\uffee\024\uffee\037\uffee\040\uffee\041\uffee\042\uffee" +
    "\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee\051" +
    "\uffee\052\uffee\054\uffee\056\uffee\061\uffee\062\uffee\063\uffee" +
    "\064\uffee\065\uffee\066\uffee\067\uffee\001\002\000\026\004" +
    "\156\006\054\007\051\010\056\011\053\013\052\014\061" +
    "\016\057\027\055\035\060\001\002\000\064\002\uffec\015" +
    "\uffec\023\uffec\024\uffec\037\uffec\040\uffec\041\uffec\042\uffec" +
    "\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051" +
    "\uffec\052\uffec\054\uffec\056\uffec\061\uffec\062\uffec\063\uffec" +
    "\064\uffec\065\uffec\066\uffec\067\uffec\001\002\000\044\004" +
    "\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\013\uffe0\014\uffe0" +
    "\016\uffe0\024\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\001\002\000\004\024\161" +
    "\001\002\000\044\004\uffd9\006\uffd9\007\uffd9\010\uffd9\011" +
    "\uffd9\013\uffd9\014\uffd9\016\uffd9\024\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\034\uffd9\035\uffd9\036\uffd9\001" +
    "\002\000\010\004\163\005\165\033\164\001\002\000\064" +
    "\002\uffef\015\uffef\023\uffef\024\uffef\037\uffef\040\uffef\041" +
    "\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef" +
    "\050\uffef\051\uffef\052\uffef\054\uffef\056\uffef\061\uffef\062" +
    "\uffef\063\uffef\064\uffef\065\uffef\066\uffef\067\uffef\001\002" +
    "\000\022\015\020\023\017\044\025\045\033\047\012\065" +
    "\031\066\047\067\037\001\002\000\022\015\020\023\017" +
    "\044\025\045\033\047\012\065\031\066\047\067\037\001" +
    "\002\000\026\004\167\006\054\007\051\010\056\011\053" +
    "\013\052\014\061\016\057\027\055\035\060\001\002\000" +
    "\064\002\ufff2\015\ufff2\023\ufff2\024\ufff2\037\ufff2\040\ufff2" +
    "\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047" +
    "\ufff2\050\ufff2\051\ufff2\052\ufff2\054\ufff2\056\ufff2\061\ufff2" +
    "\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2\001" +
    "\002\000\026\004\171\006\054\007\051\010\056\011\053" +
    "\013\052\014\061\016\057\027\055\035\060\001\002\000" +
    "\064\002\ufff1\015\ufff1\023\ufff1\024\ufff1\037\ufff1\040\ufff1" +
    "\041\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047" +
    "\ufff1\050\ufff1\051\ufff1\052\ufff1\054\ufff1\056\ufff1\061\ufff1" +
    "\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\001" +
    "\002\000\014\037\023\040\032\041\036\042\013\043\015" +
    "\001\002\000\004\020\174\001\002\000\006\020\uffc9\066" +
    "\uffc9\001\002\000\022\015\020\023\017\044\025\045\033" +
    "\047\012\065\031\066\047\067\037\001\002\000\064\002" +
    "\ufff5\015\ufff5\023\ufff5\024\ufff5\037\ufff5\040\ufff5\041\ufff5" +
    "\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050" +
    "\ufff5\051\ufff5\052\ufff5\054\ufff5\056\ufff5\061\ufff5\062\ufff5" +
    "\063\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\001\002\000" +
    "\026\004\200\006\054\007\051\010\056\011\053\013\052" +
    "\014\061\016\057\027\055\035\060\001\002\000\064\002" +
    "\ufff0\015\ufff0\023\ufff0\024\ufff0\037\ufff0\040\ufff0\041\ufff0" +
    "\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\050" +
    "\ufff0\051\ufff0\052\ufff0\054\ufff0\056\ufff0\061\ufff0\062\ufff0" +
    "\063\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\001\002\000" +
    "\044\004\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\013\uffd7" +
    "\014\uffd7\016\uffd7\024\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\034\uffd7\035\uffd7\036\uffd7\001\002\000\026" +
    "\004\203\006\054\007\051\010\056\011\053\013\052\014" +
    "\061\016\057\027\055\035\060\001\002\000\064\002\uffed" +
    "\015\uffed\023\uffed\024\uffed\037\uffed\040\uffed\041\uffed\042" +
    "\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed\050\uffed" +
    "\051\uffed\052\uffed\054\uffed\056\uffed\061\uffed\062\uffed\063" +
    "\uffed\064\uffed\065\uffed\066\uffed\067\uffed\001\002\000\004" +
    "\002\000\001\002\000\004\066\206\001\002\000\004\025" +
    "\207\001\002\000\016\026\ufffb\037\023\040\032\041\036" +
    "\042\013\043\015\001\002\000\006\026\ufffa\031\221\001" +
    "\002\000\004\026\ufffc\001\002\000\004\066\220\001\002" +
    "\000\004\026\214\001\002\000\004\023\215\001\002\000" +
    "\056\015\020\023\017\024\ufff6\037\023\040\032\041\036" +
    "\042\013\043\015\044\025\045\033\046\034\047\012\050" +
    "\011\051\035\052\022\054\026\056\040\061\021\062\024" +
    "\065\031\066\027\067\037\001\002\000\004\024\217\001" +
    "\002\000\060\002\ufffd\015\ufffd\023\ufffd\037\ufffd\040\ufffd" +
    "\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047" +
    "\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\056\ufffd" +
    "\061\ufffd\062\ufffd\065\ufffd\066\ufffd\067\ufffd\001\002\000" +
    "\006\026\ufff8\031\ufff8\001\002\000\014\037\023\040\032" +
    "\041\036\042\013\043\015\001\002\000\004\026\ufff9\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\010\002\004\003\005\012\006\001\001\000" +
    "\004\007\204\001\001\000\002\001\001\000\012\004\027" +
    "\005\040\006\013\007\015\001\001\000\006\003\007\012" +
    "\006\001\001\000\002\001\001\000\004\006\201\001\001" +
    "\000\004\006\200\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\103" +
    "\010\157\011\102\001\001\000\004\006\156\001\001\000" +
    "\004\006\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\113\001\001\000" +
    "\010\005\107\006\013\007\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\041\005" +
    "\040\006\013\007\015\001\001\000\002\001\001\000\004" +
    "\007\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\077\001\001\000\004\006\076\001\001\000" +
    "\004\006\075\001\001\000\004\006\074\001\001\000\004" +
    "\006\072\001\001\000\004\006\071\001\001\000\004\006" +
    "\070\001\001\000\004\006\066\001\001\000\004\006\065" +
    "\001\001\000\002\001\001\000\012\004\063\005\040\006" +
    "\013\007\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\103\010\101\011\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\103\011\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\111\005" +
    "\040\006\013\007\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\124\005\040\006\013\007\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\130\005\040\006\013\007\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\140\017\137\001\001" +
    "\000\002\001\001\000\006\016\146\017\137\001\001\000" +
    "\002\001\001\000\004\006\142\001\001\000\002\001\001" +
    "\000\010\005\144\006\013\007\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\150" +
    "\006\013\007\015\001\001\000\002\001\001\000\012\004" +
    "\152\005\040\006\013\007\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\167\001\001\000" +
    "\004\006\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\211\013\212\014\210\015\207\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\215\005\040\006\013" +
    "\007\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\211\014\221\015\207\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public void syntax_error(Symbol lastToken) {
    System.err.println("Syntax error at  " +
                       "Line: " + lastToken.left + "   " +
                       "Column: " + lastToken.right);
}

public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    done_parsing();
    System.exit(1);
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= func_list stmt_list 
            {
              ProgramNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunctionListNode f = (FunctionListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementListNode s = (StatementListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Program parsed!");
        RESULT = new ProgramNode(f, s);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // func_list ::= func func_list 
            {
              FunctionListNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunctionNode f = (FunctionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionListNode l = (FunctionListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Function list parsed!");
        l.addFunction(f, 0);
        RESULT = l;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // func_list ::= 
            {
              FunctionListNode RESULT =null;
		
        System.err.println("Empty function list parsed!");
        RESULT = new FunctionListNode();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // func ::= FUNC type ID OPENPAREN param_list CLOSEPAREN OPENCURLY stmt_list CLOSECURLY 
            {
              FunctionNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ParameterListNode p = (ParameterListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementListNode s = (StatementListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Function parsed!");
        RESULT = new FunctionNode(t, i, p, s);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // param_list ::= non_empty_param_list 
            {
              ParameterListNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParameterListNode l = (ParameterListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = l;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // param_list ::= 
            {
              ParameterListNode RESULT =null;
		
        System.err.println("Empty parameter list parsed!");
        RESULT = new ParameterListNode();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // non_empty_param_list ::= param 
            {
              ParameterListNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParameterNode p = (ParameterNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("End of Parameter list parsed!");
        RESULT = new ParameterListNode(p);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_empty_param_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // non_empty_param_list ::= param COMMA non_empty_param_list 
            {
              ParameterListNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParameterNode p = (ParameterNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParameterListNode l = (ParameterListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Parameter list parsed!");
        l.addParameter(p, 0);
        RESULT = l;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_empty_param_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // param ::= type ID 
            {
              ParameterNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Parameter parsed!");
        RESULT = new ParameterNode(t, i);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt_list ::= stmt stmt_list 
            {
              StatementListNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementListNode l = (StatementListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Statement list parsed!");
        /* Add statement at position 0; it should be at the *front* of the list */
        l.addStatement(s, 0);
        RESULT = l;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt_list ::= 
            {
              StatementListNode RESULT =null;
		
        System.err.println("Empty statement list parsed!");
        RESULT = new StatementListNode();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= expr SEMICOLON 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as expression!");
        RESULT = new ExpressionStatementNode(e);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= PRINT expr SEMICOLON 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as print!");
        RESULT = new PrintStatementNode(e);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= ID ASSIGN expr SEMICOLON 
            {
              StatementNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as assignment!");
        RESULT = new AssignStatementNode(i, e);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= type ID ASSIGN expr SEMICOLON 
            {
              StatementNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as a declaration assignment!");
        AssignStatementNode assignment = new AssignStatementNode(i, e);
        RESULT = new DeclarationStatementNode(t, i, assignment);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= type ID READFILE expr SEMICOLON 
            {
              StatementNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as a declaration file read!");
        FileReadStatementNode assignment = new FileReadStatementNode(i, e);
        RESULT = new DeclarationStatementNode(t, i, assignment);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= expr WRITEFILE expr SEMICOLON 
            {
              StatementNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as a file write!");
        RESULT = new FileWriteStatementNode(e1, e2);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= type ID SEMICOLON 
            {
              StatementNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as a declaration!");
        RESULT = new DeclarationStatementNode(t, i);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= ERROR OPENCURLY stmt_list CLOSECURLY 
            {
              StatementNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementListNode l = (StatementListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as error statement!");
        RESULT = new ErrorStatementNode(l);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= EXIT expr SEMICOLON 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as exit statement!");
        RESULT = new ExitStatementNode(e);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= RETURN expr SEMICOLON 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as return!");
        RESULT = new ReturnStatementNode(e);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= UNTIL stmt OPENCURLY stmt_list CLOSECURLY 
            {
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementListNode l = (StatementListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as until!");
        RESULT = new UntilStatementNode(s, l);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= IF OPENPAREN expr CLOSEPAREN OPENCURLY stmt_list CLOSECURLY 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementListNode il = (StatementListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as if statement!");
        RESULT = new IfStatementNode(e, il);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= IF OPENPAREN expr CLOSEPAREN OPENCURLY stmt_list CLOSECURLY ELSE OPENCURLY stmt_list CLOSECURLY 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		StatementListNode il = (StatementListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementListNode el = (StatementListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as if-else statement!");
        RESULT = new IfStatementNode(e, il, el);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= FOR OPENPAREN type ID COLON expr CLOSEPAREN OPENCURLY stmt_list CLOSECURLY 
            {
              StatementNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementListNode l = (StatementListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as for statement!");
        RESULT = new ForStatementNode(t, i, e, l);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= SWITCH OPENPAREN expr CLOSEPAREN OPENCURLY case_list CLOSECURLY 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CaseListNode cl = (CaseListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as switch statement!");
        RESULT = new SwitchStatementNode(e, cl);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr PLUS expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as plus!");
        RESULT = new BinaryOpExpressionNode(e1, e2, "+");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr MINUS expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as minus!");
        RESULT = new BinaryOpExpressionNode(e1, e2, "-");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr TIMES expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as times!");
        RESULT = new BinaryOpExpressionNode(e1, e2, "*");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr DIVIDE expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as divide!");
        RESULT = new BinaryOpExpressionNode(e1, e2, "/");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr AND expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as and!");
        RESULT = new BinaryOpExpressionNode(e1, e2, "&&");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr OR expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as or!");
        RESULT = new BinaryOpExpressionNode(e1, e2, "||");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= NOT expr 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as not!");
        RESULT = new NotExpressionNode(e);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr EQUALS expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as comparison!");
        RESULT = new BinaryOpExpressionNode(e1, e2, "==");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= ID 
            {
              ExpressionNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as ID!");
        RESULT = new IdExpressionNode(i);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= NUM 
            {
              ExpressionNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as NUM!");
        RESULT = new NumExpressionNode(n);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= QSTRING 
            {
              ExpressionNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as QUOTED STRING!");
        RESULT = new StringExpressionNode(s);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= TRUE 
            {
              ExpressionNode RESULT =null;
		
        System.err.println("Expression parsed as TRUE literal!");
        RESULT = new BooleanLiteralExpressionNode(true);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= FALSE 
            {
              ExpressionNode RESULT =null;
		
        System.err.println("Expression parsed as FALSE literal!");
        RESULT = new BooleanLiteralExpressionNode(false);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= OPENCURLY expr_list CLOSECURLY 
            {
              ExpressionNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionListNode l = (ExpressionListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Expression parsed as expression list!");
        RESULT = l;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= ID OPENPAREN expr_list CLOSEPAREN 
            {
              ExpressionNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionListNode l = (ExpressionListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Expression parsed as a function call!");
        RESULT = new FunctionCallExpressionNode(i, l);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= INPUT expr 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as input!");
        RESULT = new InputExpressionNode(e);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr OPENSQBRACE expr CLOSESQBRACE 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Expression parsed as list access!");
        RESULT = new ListAccessExpressionNode(e1, e2);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr OPENFILTER expr CLOSEFILTER 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Expression parsed as list filter!");
        RESULT = new ListFilterExpressionNode(e1, e2);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr_list ::= non_empty_expr_list 
            {
              ExpressionListNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionListNode l = (ExpressionListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = l;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr_list ::= 
            {
              ExpressionListNode RESULT =null;
		
        System.err.println("Empty expression list parsed!");
        RESULT = new ExpressionListNode();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // non_empty_expr_list ::= expr 
            {
              ExpressionListNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("End of Expression list parsed!");
        RESULT = new ExpressionListNode(e);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_empty_expr_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // non_empty_expr_list ::= expr COMMA non_empty_expr_list 
            {
              ExpressionListNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionListNode l = (ExpressionListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression list parsed!");
        l.addExpression(e, 0);
        RESULT = l;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_empty_expr_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // case_list ::= DEFAULT COLON stmt 
            {
              CaseListNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("End of Case list parsed!");
        CaseListNode cl = new CaseListNode();
        cl.addCase(new CaseNode(null, s));
        RESULT = cl;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // case_list ::= case case_list 
            {
              CaseListNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CaseNode c = (CaseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CaseListNode l = (CaseListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Case list parsed!");
        l.addCase(c, 0);
        RESULT = l;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // case ::= CASE expr COLON stmt 
            {
              CaseNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Case parsed!");
        RESULT = new CaseNode(e, s);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type ::= NUMTYPE 
            {
              TypeNode RESULT =null;
		
        System.err.println("Type parsed as NUM!");
        RESULT = new TypeNode("num");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= TEXTTYPE 
            {
              TypeNode RESULT =null;
		
        System.err.println("Type parsed as TEXT!");
        RESULT = new TypeNode("text");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= BOOLTYPE 
            {
              TypeNode RESULT =null;
		
        System.err.println("Type parsed as BOOL!");
        RESULT = new TypeNode("bool");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= VOIDTYPE 
            {
              TypeNode RESULT =null;
		
        System.err.println("Type parsed as VOID!");
        RESULT = new TypeNode("void");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type ::= LISTTYPE LT type GT 
            {
              TypeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Type parsed as LIST!");
        RESULT = new ListTypeNode(t);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
